import PropTypes from 'prop-types';
import { useState } from 'react';
import { useTranslation } from 'react-i18next';
import ThemeToggle from './ThemeToggle';
import LanguageToggle from './LanguageToggle';

const NavBar = ({ onThemeToggle, theme, activePage, setActivePage, language, onLanguageChange }) => {
  const { t, i18n } = useTranslation();
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  const handleLanguageChange = (lang) => {
    i18n.changeLanguage(lang); // Change la langue dans i18n
    onLanguageChange(lang); // Met à jour l'état global
  };

  const toggleMenu = () => {
    setIsMenuOpen((prev) => !prev);
  };

  return (
    <nav
      className={`fixed top-0 left-0 w-full px-6 py-4 backdrop-blur-md bg-transparent flex justify-between items-center z-50`}
    >
      {/* Logo ou titre */}
      <div className="text-xl font-bold">Logo</div>

      {/* Menu burger pour les petits écrans */}
      <div className="md:hidden flex items-center">
        <button
          className="p-2 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500"
          onClick={toggleMenu}
        >
          <span className="sr-only">Toggle menu</span>
          {isMenuOpen ? (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth={2}
              stroke="currentColor"
              className="w-6 h-6"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M6 18L18 6M6 6l12 12"
              />
            </svg>
          ) : (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth={2}
              stroke="currentColor"
              className="w-6 h-6"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M4 6h16M4 12h16m-7 6h7"
              />
            </svg>
          )}
        </button>
      </div>

      {/* Menu principal */}
      <ul
        className={`md:flex gap-6 md:static absolute top-16 left-0 w-full bg-white md:bg-transparent md:w-auto md:p-0 p-4 shadow-lg md:shadow-none transform transition-transform duration-300 ease-in-out ${
          isMenuOpen ? 'translate-x-0' : '-translate-x-full'
        } md:translate-x-0`}
      >
        {['home', 'about', 'skills', 'portfolio', 'contact'].map((page) => (
          <li
            key={page}
            className={`cursor-pointer hover:underline p-2 md:p-0 ${
              activePage === page ? 'text-orange-500 underline' : ''
            }`}
            onClick={() => {
              setActivePage(page);
              setIsMenuOpen(false); // Ferme le menu après avoir cliqué
            }}
          >
            {t(`nav.${page}`)}
          </li>
        ))}

        {/* LanguageToggle pour les petits écrans */}
        <div className="block md:hidden mt-4">
          <LanguageToggle language={language} onLanguageChange={handleLanguageChange} />
        </div>

        {/* ThemeToggle pour les petits écrans */}
        <div className="block md:hidden mt-4">
          <ThemeToggle theme={theme} onToggle={onThemeToggle} />
        </div>
      </ul>

      {/* Zone d'actions */}
      <div className="hidden md:flex items-center gap-4">
        {/* LanguageToggle */}
        <LanguageToggle language={language} onLanguageChange={handleLanguageChange} />

        {/* ThemeToggle */}
        <ThemeToggle theme={theme} onToggle={onThemeToggle} />
      </div>
    </nav>
  );
};

NavBar.propTypes = {
  onThemeToggle: PropTypes.func.isRequired,
  theme: PropTypes.string.isRequired,
  activePage: PropTypes.string.isRequired,
  setActivePage: PropTypes.func.isRequired,
  language: PropTypes.string.isRequired,
  onLanguageChange: PropTypes.func.isRequired,
};

export default NavBar;
